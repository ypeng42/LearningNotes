
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Common %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Read problem carefully, don't miss things like "duplicate does not exist" etc
-- use single variable "countdown" instead of create 1 "tracker" and 1 "target"

-- new List<int>(arr.ToArray()) to make a deep copy

-- Memorize the technique of finding all subarray/treepath sum equal to k use Hashmap (560. Subarray Sum Equals K, 437. Path Sum III)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Tree %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
## Level order traversal

199. Binary Tree Right Side View
515. Find Largest Value in Each Tree Row    

## Useful tips
-- pre-order traversal of a BST is sorted array
-- 1..n is the in-order traversal for any BST with nodes 1 to n

-- the essense of tree traversal

traverse (TreeNode root) {
   if (root == null)
      return;
   traverse(root.left);
   // Do some business
   traverse(root.right);
}

-- Use start and end index to indicate range of tree in an array is a common trick

-- When traverse tree, set a few pointers and do operation is common (1028. Recover a Tree From Preorder Traversal)

-- When dealing with tree height, use -1 to indicate something is wrong/find answer etc

-- bottom up approach
recurse(left)
recurse(right)
Action()

-- top down approach
Action()
recurse(left)
recurse(right)

depends on the problem, 1 approach is more siutable. Also apply to things other than tree


