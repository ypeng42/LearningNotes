using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LearningNotes.leetcode;
using LearningNotes.leetcode.Utils;

namespace LeetcodeTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestTwoSum()
        {
            var input = new int[] { 230, 863, 916, 585, 981, 404, 316, 785, 88, 12, 70, 435, 384, 778, 887,
                755, 740, 337, 86, 92, 325, 422, 815, 650, 920, 125, 277, 336, 221, 847, 168, 23, 677, 61, 400,
                136, 874, 363, 394, 199, 863, 997, 794, 587, 124, 321, 212, 957, 764, 173, 314, 422, 927, 783, 930,
                282, 306, 506, 44, 926, 691, 568, 68, 730, 933, 737, 531, 180, 414, 751, 28, 546, 60, 371, 493, 370,
                527, 387, 43, 541, 13, 457, 328, 227, 652, 365, 430, 803, 59, 858, 538, 427, 583, 368, 375, 173, 809,
                896, 370, 789 };
            int target = 542;

            _2Sum.TwoSum(input, target);
            Assert.AreEqual(_2Sum.TwoSum(input, target), new int[] { 23, 22});
        }

        [TestMethod]
        public void TestLongestArithSeqLength()
        {
            //Assert.AreEqual(LongestArithSeqLength.Solution(new[] {9, 4, 7, 2, 10}), 3);


            // 23 (23), 27 (26), 31 (31), 35 (33), 39 (34), 43 (60)
            Assert.AreEqual(LongestArithSeqLength.Solution2(new[] {22, 8, 57, 41, 36, 46, 42, 28, 42, 14, 9, 43, 27,
                51, 0, 0, 38, 50, 31, 60, 29, 31, 20, 23, 37, 53, 27, 1, 47, 42, 28, 31, 10, 35, 39, 12, 15, 6, 35,
                31, 45, 21, 30, 19, 5, 5, 4, 18, 38, 51, 10, 7, 20, 38, 28, 53, 15, 55, 60, 56, 43, 48, 34, 53, 54,
                55, 14, 9, 56, 52 }), 6);
        }

        [TestMethod]
        public void TestRecoverFromPreorder()
        {
            RecoverFromPreorder s = new RecoverFromPreorder();
            s.Solution("439-921--481---3----962-----396------457-------9--------866---------226-------944--------97---------622----------515-----------966------------4----------600--------275---------168----------919-----------460------------443------------8-------------75-----------589------------110-------------625--------------280-------------830---------991------326-------575--------929---------608----------246-----------490--------322---------800----------424----------619-------310--------171--------377---------229---------310-----800------90-------540--------194---------397----------850----------847-----------774------------824------------343-----------72------------838------------761---------734--------467---------172----------981-----------272------------827-------------749-----------99------------856-------------132-------------558--------------950---------------386------------838-------------422------171-------135----49-----228-----259------291-------236--------750---748----142-----698------717-------709--------173---------469---------656--------8---------800----------279-----------788-----------244------------182-------------183-------------731--------------932------------190----------297-----------281------------7-------------31--------------15---------------195--------------421---------------325------------711-----------632-------58--------180---------290----------810-----------329----------522--------804---------626----------742------992-------876-------528-----685------181-------743--------625--------54------924-------150--------410---------621----------539-----------765---------525----------649----37-----226------54-------844--------816---------120-------596--------203---------390----------938-----------266--------536---------418----------83-----------723------------33------845-------289--------246---------254----------259-----------257------------846------------181---------483----------9-----------503------------485-------------777--------------640--------757---------301----------723-------825--------648---------60---------22----------193-----------563------------958-------------33-----------425------------883-------------631------------43-------------52-----235------20-------903--------213-------115--------357------57-------311--------110---------232--------455---------800---------319-------630--243---543----210-----381------509----595-----512------463-------398--------340---------441---------875----------149-------208--------364--------819---------70----------544-----------948------------685------10-------548--------309---------534--------138-------959-----490------401-------121--------419-------206--------321--------720---------577---462----674-----440------320-------585--------981------874-------270-------552--------776---------765----------978--------741---------469----------903-----814------604-------295-------903------275-------519--------555-------874--------539---------590---------172--------681---------846----------416----105-----142------637-------347--------66---------622------229-------837-----559-658--319---84----514-----517------337-------871--------695------538-------559--------72--------699-------642--------775---------357----------776-----------474------------176-----------592--------182---------24-----147----469-----601------847-------328------608-------102-----453------133------672---548----359-----554------384-------492-------569-----866------784-------13--------647--------546------819-------490--------777---------655----------519---------943--------572---------927---------303----------332----------207-----------116-----------468----948-----424------516-------179--------889---------21----------606-----------706------------304-------------960------------635-------------523-------------284--------------360---------------319--------208-------832--------11------413-------944-------78--------635---------89--------320-----77------116-------801------989--921---474----525-----749------623-------134------245-------788-----600------946-------533--------229---------305----------459--------365-------151--------431---------306----------529-----------14------------225--------879---------277----------373-----------867------------999---------487------811-------931----651-----473-----785------126-------803-------460--------257------131-------368--------944---------421----------246-----------639-----------564------------383-------------485---------935--------631---------417----------1000-------444--------848---------596---------216--------677---------114---297----659-----817------259------365-------287-----921------667-------718-------251--------565---------467------445----585-----893------793-------434-------939--------634---------402---------917------208-------1000--------923-------838--------893---------62----------716-----------296----------78-----------72-----------694------------30------------219--------428---------237---------841----------925-----------28-----182------249-------950--------840---------142----------191-----------124------------696---------314----------177-----------393------------145----------442-----------73-----------337--------598---------29----------136-----------332------------902------------122-------------794--------------419--------------991---------------650----------------743----------832-----------361---------36----------124------547-------504-------23--------867---------162----------694-----------364--------229---------228---------851----------5-----------61------------730-----------326");
        }

        [TestMethod]
        public void TestListAddTwoNumbers()
        {
            var c = new ListAddTwoNumbers();
            Assert.AreEqual(c.AddTwoNumbers(ListNode.Convert(new int[] {9, 8}), ListNode.Convert(new int[] {1})),
                ListNode.Convert(new int[] {0, 9}));

            Assert.AreEqual(c.AddTwoNumbers(ListNode.Convert(new int[] {1, 8}), ListNode.Convert(new int[] {0})),
                ListNode.Convert(new int[] {1, 8}));

            Assert.AreEqual(c.AddTwoNumbers(ListNode.Convert(new int[] {2, 4, 3}), ListNode.Convert(new int[] {5, 6, 4})), 
                ListNode.Convert(new int[] {7, 0, 8}));

        }

        [TestMethod]
        public void TwoCitySchedule()
        {
            var s = new TwoCitySchedule();
            s.SimpleSolution(new int[][] {
                new int[] { 10, 20 },
                new int[] { 30, 200 },
                new int[] { 400, 50 },
                new int[] { 30, 20 }
            });
        }
    }
}
